{"version":3,"sources":["components/Comments.js","components/CommentSearchShort.js","components/Search.js","App.js","index.js"],"names":["Comments","comments","timeRegex","text","time","match","hour","minute","second","split","length","parseInt","timeToSecond","String","Container","Row","Col","ListGroup","undefined","map","item","index","Item","action","href","snippet","videoId","topLevelComment","id","textOriginal","target","CommentSearchShort","filterComment","ButtonToolbar","className","aria-label","ButtonGroup","OverlayTrigger","overlay","Tooltip","Button","variant","onClick","Mark","document","querySelector","markRegExp","filtered","filter","comment","InputGroup","Prepend","Text","FormControl","type","placeholder","onChange","event","preventDefault","toLowerCase","indexOf","value","toLocaleLowerCase","Search","useState","videoIdInput","setVideoIdInput","setComments","filteredData","setFilteredData","isLoading","setIsLoading","thumbnails","setThumbnails","apiKey","process","getOnePageComment","pageToken","a","url","join","fetch","response","json","getAllPagesComments","then","result","items","nextPageToken","restOfVideoIds","concat","useEffect","getElementById","apiRequest","data","medium","width","height","Navbar","bg","expand","aria-describedby","ytData","Alert","Badge","Spinner","animation","md","span","offset","Image","src","thumbnail","App","ReactDOM","render"],"mappings":"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","file":"static/js/main.6e93827e.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Col, Container, ListGroup, Row } from 'react-bootstrap';\r\n\r\nexport const Comments = ({ comments }) => {\r\n\r\n    const timeToSecond = (time) => {\r\n        let hour,minute,second=\"0\";\r\n\r\n        if (time.split(\":\").length === 2) {\r\n            hour = parseInt(\"0\");\r\n            minute = parseInt(time.split(\":\")[0]) || 0;\r\n            second = parseInt(time.split(\":\")[1]) || 0;\r\n        } else {\r\n            hour = parseInt(time.split(\":\")[0]) || 0 ;\r\n            minute = parseInt(time.split(\":\")[0]) || 0;\r\n            second = parseInt(time.split(\":\")[1]) || 0;\r\n        }\r\n\r\n        return (hour * 3600) + (minute * 60) + second;\r\n    }\r\n\r\n    const timeRegex = (text) => {\r\n        let time = text.match(/[0-5][0-9]:[0-5][0-9]/g);\r\n\r\n        return time != null ? timeToSecond(String(time)) : \"0\";\r\n    }\r\n\r\n    return (\r\n        <Container>\r\n            <Row>\r\n                <Col>\r\n                    <ListGroup>\r\n                        {\r\n                            comments !== undefined && (comments.map(\r\n                                (item, index) => (<ListGroup.Item key={item.snippet.topLevelComment.id} action href={`https://www.youtube.com/watch?v=${item.snippet.videoId}&lc=${item.snippet.topLevelComment.id}&t=${timeRegex(item.snippet.topLevelComment.snippet.textOriginal)}`} target=\"_blank\">{item.snippet.topLevelComment.snippet.textOriginal}</ListGroup.Item>)\r\n                            ))\r\n                        }\r\n                    </ListGroup>\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n    )\r\n\r\n}","import React from 'react'\r\nimport { FaRegClock } from 'react-icons/fa';\r\nimport { ButtonToolbar, ButtonGroup, Button, InputGroup, FormControl, OverlayTrigger, Tooltip } from 'react-bootstrap';\r\nimport Mark from 'mark.js';\r\n\r\nexport const CommentSearchShort = ({ comments, filterComment }) => {\r\n\r\n    const filteredCommentByTimeTag = () => {\r\n        \r\n        let instance = new Mark(document.querySelector(\".container\"));\r\n        instance.markRegExp(/[0-5][0-9]:[0-5][0-9]/);\r\n        \r\n        let filtered = comments.filter(\r\n            (comment) => {\r\n                return comment.snippet.topLevelComment.snippet.textOriginal.match(/[0-5][0-9]:[0-5][0-9]/g);\r\n            }\r\n        );\r\n\r\n        filterComment(filtered);\r\n    }\r\n\r\n    const filteredCommentByWord = (event) => {\r\n        event.preventDefault();\r\n\r\n        let filtered = comments.filter(\r\n            (comment) => {\r\n                return comment.snippet.topLevelComment.snippet.textOriginal.toLowerCase().indexOf(event.target.value.toLocaleLowerCase()) !== - 1;\r\n            }\r\n        );\r\n\r\n        filterComment(filtered);\r\n    }\r\n\r\n    return (\r\n\r\n        <ButtonToolbar className=\"mb-3\" aria-label=\"Toolbar with Button groups\">\r\n            <ButtonGroup className=\"mr-2\" aria-label=\"First group\">\r\n                <OverlayTrigger\r\n                    overlay={\r\n                        <Tooltip id={'tooltip-top'}>\r\n                            Time tag filter\r\n                       </Tooltip>\r\n                    }>\r\n                    <Button variant=\"secondary\" onClick={filteredCommentByTimeTag}><FaRegClock /></Button>\r\n                </OverlayTrigger>\r\n            </ButtonGroup>\r\n            <InputGroup>\r\n                <InputGroup.Prepend>\r\n                    <InputGroup.Text id=\"btnGroupAddon\" >Search Comment</InputGroup.Text>\r\n                </InputGroup.Prepend>\r\n                <FormControl\r\n                    type=\"text\"\r\n                    placeholder=\"...\"\r\n                    onChange={filteredCommentByWord}\r\n                />\r\n            </InputGroup>\r\n        </ButtonToolbar>\r\n\r\n    )\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Comments } from './Comments';\r\nimport { InputGroup, FormControl, Navbar, Alert, Container, Row, Col, Spinner, Badge, Image } from 'react-bootstrap';\r\nimport { CommentSearchShort } from './CommentSearchShort';\r\n\r\nexport const Search = () => {\r\n    const [videoIdInput, setVideoIdInput] = useState(\"\");\r\n    const [comments, setComments] = useState();\r\n    const [filteredData, setFilteredData] = useState([]);\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [thumbnails, setThumbnails] = useState(\"\");\r\n    \r\n    const apiKey = process.env.REACT_APP_API_TOKEN;\r\n\r\n    const filterComment = (comments) => {\r\n        setFilteredData(comments);\r\n    }\r\n\r\n    const onChange = (event) => {\r\n\r\n        event.preventDefault();\r\n\r\n        setIsLoading(true);\r\n\r\n        setVideoIdInput(event.target.value);\r\n\r\n        const videoId = event.target.value.split('https://www.youtube.com/watch?v=').length === 2 ? event.target.value.split('https://www.youtube.com/watch?v=')[1] : event.target.value;\r\n\r\n        getAllPagesComments(videoId, '').then((ytData) => { setComments(ytData); setIsLoading(false); });\r\n\r\n    }\r\n\r\n    const getOnePageComment = async (videoId, pageToken) => {\r\n        const url = [\r\n            'https://www.googleapis.com/youtube/v3/commentThreads?',\r\n            'part=snippet,replies',\r\n            'maxResults=100',\r\n            `videoId=${videoId}`,\r\n            `key=${apiKey}`,\r\n            `pageToken=${pageToken}`,\r\n        ].join('&');\r\n\r\n        const response = await fetch(url);\r\n        const json = await response.json();\r\n        return json;\r\n    };\r\n\r\n    const getAllPagesComments = (videoId, pageToken) => {\r\n        // get the comments for the first page by making simple API call\r\n        return getOnePageComment(videoId, pageToken)\r\n            .then((result) => {\r\n                const comments = result.items;\r\n\r\n                // Base case: this is the last page\r\n                if (!result.nextPageToken) return comments;\r\n\r\n                // Recursive step: get the rest of the pages, then concat it\r\n                return getAllPagesComments(videoId, result.nextPageToken)\r\n                    .then(restOfVideoIds => comments.concat(restOfVideoIds));\r\n            });\r\n    };\r\n\r\n    useEffect(async () => {\r\n        if (comments != null) {\r\n            \r\n            let id = document.getElementById(\"basic-url\").value.split('https://www.youtube.com/watch?v=').length === 2 ? document.getElementById(\"basic-url\").value.split('https://www.youtube.com/watch?v=')[1] : document.getElementById(\"basic-url\").value;\r\n            \r\n            const apiRequest = [\r\n                'https://youtube.googleapis.com/youtube/v3/videos?',\r\n                'part=snippet',\r\n                `id=${id}`,\r\n                `key=${apiKey}`,\r\n            ].join('&');            \r\n           \r\n            const response = await fetch(apiRequest);\r\n            const data = await response.json();            \r\n           \r\n            if(data.items[0] == undefined || data.items[0].snippet == undefined) return; \r\n\r\n            const { url, width, height } = data.items[0].snippet.thumbnails.medium;    \r\n            \r\n            setThumbnails(url);\r\n        }\r\n      \r\n    },[comments])\r\n\r\n    return (\r\n        <>\r\n            <Container>\r\n                <Row>\r\n                    <Col>\r\n                        <Navbar bg=\"light\" expand=\"lg\">\r\n                            <InputGroup className=\"mb-3\">\r\n                                <InputGroup.Prepend>\r\n                                    <InputGroup.Text id=\"basic-addon3\" >\r\n                                        https://www.youtube.com/watch?v=\r\n                            </InputGroup.Text>\r\n                                </InputGroup.Prepend>\r\n                                <FormControl id=\"basic-url\" aria-describedby=\"basic-addon3\" placeholder=\"Video ID...\" onChange={onChange} />\r\n                            </InputGroup>\r\n                        </Navbar>\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col>\r\n                        {videoIdInput &&\r\n                            <Alert variant=\"info\">\r\n                                <b>Video ID :</b> {videoIdInput} {' '} <b>Comment Count :</b> {comments && <Badge variant=\"primary\"> {comments.length} </Badge>}\r\n                            </Alert>}\r\n\r\n                        {isLoading && (\r\n                            <>\r\n                                <Spinner animation=\"grow\" variant=\"primary\" />\r\n                                <Spinner animation=\"grow\" variant=\"secondary\" />\r\n                                <Spinner animation=\"grow\" variant=\"success\" />\r\n                            </>\r\n                        )}\r\n                    </Col>\r\n                </Row>\r\n                <Row className=\"justify-content-md-center\">\r\n                    <Col md={{span:4, offset:1}}>\r\n                        <Image src={thumbnails} thumbnail />\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col>\r\n                        {(comments !== undefined && comments.length > 0) && <CommentSearchShort comments={comments} filterComment={filterComment} />}\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col>\r\n                        {filteredData.length > 0\r\n                            ? <Comments comments={filteredData} />\r\n                            : <Comments comments={comments} />\r\n                        }\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n        </>\r\n    )\r\n}","import React from 'react';\nimport { Search } from './components/Search';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Container, Row, Col } from 'react-bootstrap';\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <Container>\n        <Row>\n          <Col><Search /></Col>\n        </Row>        \n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals"],"sourceRoot":""}